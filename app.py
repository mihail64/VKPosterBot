# -*- coding: utf-8 -*-
import telebot
import io, re, os, time
from telebot import types
from SQLighter import SQLighter
import botan, requests, json, logging

os.environ['TZ'] = 'Europe/Moscow'
time.tzset() # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram –∏ Botan
BOTAN_TOKEN = ''
API_TOKEN = ''

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é
key_default = types.ReplyKeyboardMarkup(resize_keyboard=True)
key_default.row(types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–ö üì†'))
key_default.row(types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü üöÄ'))
key_default.row(types.KeyboardButton('–û –±–æ—Ç–µ VK Poster ü§ñ'))

key_hide = types.ReplyKeyboardHide(selective=False)
key_force = types.ForceReply(selective=False)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞, —Å–æ—Ö—Ä–∞–Ω—è—é—â–µ–≥–æ –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.getLogger('requests').setLevel(logging.CRITICAL)
logging.basicConfig(format='[%(asctime)s]%(message)s', 
    level=logging.INFO, filename='app.log', datefmt='%d.%m.%Y %H:%M:%S')

logger = telebot.logger
telebot.logger.setLevel(logging.DEBUG) # Outputs debug messages to console.

def listener(messages):
    for m in messages:
        if m.content_type == 'text':
            logging.info("[" + str(m.chat.id) + "]: " + m.text)

bot = telebot.TeleBot(API_TOKEN)
bot.set_update_listener(listener)

def keyboard_setup(result):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if result[0][10] == 0:
        keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî'))
    else:
        keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîï'))
    if result[0][7] == 0:
        keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã üìù'))
    else:
        keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã üìù'))
    if result[0][8] == 0:
        keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è üìé'))
    else:
        keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è üìé'))
    if result[0][12] == 0:
        keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üó£'))
    else:
        keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üó£'))
    if result[0][11] == 0:
        keyboard.row(types.KeyboardButton('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã üëÅ'))
    else:
        keyboard.row(types.KeyboardButton('–°–∫—Ä—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã üëÅ'))
    keyboard.row(types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚ùå'))
    keyboard.row(types.KeyboardButton('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
    return keyboard

@bot.message_handler(commands=['start'])
def command_start(message):
    UID = message.chat.id

    bot.send_message(UID, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ –∏–∑ *–≥—Ä—É–ø–ø –∏ –ø–∞–±–ª–∏–∫–æ–≤ ' \
        '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ —Ç–µ–±–µ*, –∞ —Ç–∞–∫–∂–µ *–≤ —Ç–≤–æ–∏ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã* Telegram.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏ ' \
        '*–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–ö* –∏–ª–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /add', parse_mode='Markdown', reply_markup=key_default)
    botan.track(BOTAN_TOKEN, message.chat.id, message, '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (start)')

@bot.message_handler(func=lambda message: message.text == u'–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–ö üì†')
@bot.message_handler(commands=['add'])
def add_page_url(message):
    UID = message.chat.id
    
    msg = bot.send_message(UID, '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏, ' \
        '–æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ—ë –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: *vk.com/mzk*):', parse_mode='Markdown', reply_markup=key_hide)
    botan.track(BOTAN_TOKEN, message.chat.id, message, '–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (add)')
    
    with io.open(str(UID) + '.UID', 'w', encoding='utf-8') as file:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ .UID –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        file.write(unicode(json.dumps({'uid': UID, 'vk' : '', 'vk_original' : '', 'vk_type' : '', \
            'channel' : '', 'type' : '', 'last_id' : '', 'to' : ''}, ensure_ascii=False)))
    bot.register_next_step_handler(msg, add_page_to)

def add_page_to(message):
    UID = message.chat.id
    UTXT = message.text
    
    if UTXT == u'/cancel':
        bot.send_message(UID, '–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é.', reply_markup=key_default)
    elif bool(re.search('(m.|new.|)(?i)vk.com', UTXT)) and \
    bool(re.search('(m.|new.|)(?i)vk.com\/id\d+', UTXT)) == False:
        # –ï—Å–ª–∏ –≤ –∞–¥—Ä–µ—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω vk.com, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª .UID –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        with open(str(UID) + '.UID', 'r') as file:
            data = json.load(file)

        if bool(re.search('(m.|new.|)(?i)vk.com\/(public|club)', UTXT)):
            data['vk'] = re.sub('(\Ahttp\S?:\/\/|)(m.|new.|)(?i)vk.com\/(club|public)', '', UTXT)
            data['vk_type'] = 'ID'
            api = 'https://api.vk.com/method/wall.get?owner_id=-%s&count=10&filter=owner' % (data['vk'])
        else:
            data['vk'] = re.sub('(\Ahttp\S?:\/\/|)(m.|new.|)(?i)vk.com\/', '', UTXT)
            data['vk_type'] = 'DOMAIN'
            api = 'https://api.vk.com/method/wall.get?domain=%s&count=10&filter=owner' % (data['vk'])
        data['vk_original'] = UTXT.lower()

        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç vk.com
            items = requests.get(api).json()
            try:
                tmp = items['response'][1]['is_pinned']
                data['last_id'] = items['response'][3]['id']
            except:
                data['last_id'] = items['response'][2]['id']

            with io.open(str(UID) + '.UID', 'w', encoding='utf-8') as file:
                # –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ .UID
                file.write(unicode(json.dumps(data)))

            key_choose = types.ReplyKeyboardMarkup(resize_keyboard=True)
            key_choose.row(types.KeyboardButton('–í –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º üë§'))
            key_choose.row(types.KeyboardButton('–í –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª üë•'))

            msg = bot.reply_to(message, '–•–æ—Ä–æ—à–æ. –ö—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã?',
                reply_markup=key_choose)
            bot.register_next_step_handler(msg, add_page_to_type)
        except Exception as ex:
            msg = bot.reply_to(message, '–í–∏–¥–∏–º–æ, —Ç—ã –ø—Ä–∏—Å–ª–∞–ª –º–Ω–µ –Ω–µ —Å—Å—ã–ª–∫—É *–Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø—É–±–ª–∏—á–Ω—É—é' \
            ' —Å—Ç—Ä–∞–Ω–∏—Ü—É* –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.', parse_mode='Markdown')
            bot.register_next_step_handler(msg, add_page_to)
    elif bool(re.search('(m.|new.|)(?i)vk.com\/id\d+', UTXT)):
        msg = bot.reply_to(message, '–ë–æ—Ç —É–º–µ–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –∏–∑ *–≥—Ä—É–ø–ø –∏ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü*, ' \
            '—Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å *id...*) —Å–µ–π—á–∞—Å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.\n–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏—Å–ª–∞—Ç—å ' \
            '–¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø—É–±–ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.', parse_mode='Markdown')
        bot.register_next_step_handler(msg, add_page_to)
    else:
        msg = bot.reply_to(message, '–í–∏–¥–∏–º–æ, —Ç—ã –ø—Ä–∏—Å–ª–∞–ª –º–Ω–µ –Ω–µ —Å—Å—ã–ª–∫—É *–Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø—É–±–ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É* ' \
            '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.', parse_mode='Markdown')
        bot.register_next_step_handler(msg, add_page_to)

def add_page_to_type(message):
    UID = message.chat.id
    UTXT = message.text
    
    if UTXT == u'/cancel':
        bot.send_message(UID, '–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é.', reply_markup=key_default)
    elif UTXT == u'–í –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º üë§':
        with open(str(UID) + '.UID', 'r') as file:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .UID –¥–ª—è —á—Ç–µ–Ω–∏—è
            data = json.load(file)
        
        data['to'] = 0
        data['channel'] = UID
        db = SQLighter()
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–í —á–∞—Ç —Å –±–æ—Ç–æ–º'
        db.insert(data['uid'], data['vk'], data['vk_original'], data['vk_type'], 
            int(data['last_id']), 0, 0, 0, 1)
        db.close()

        msg = bot.send_message(UID, '–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ ' \
            '(—Å –±–æ—Ç–æ–º *VK Poster*).\n\n–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–ø–æ—Å—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø, –∞ —Ç–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å ' \
            '–æ—Ç–ø—Ä–∞–≤–∫—É –≤–ª–æ–∂–µ–Ω–∏–π (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∞—É–¥–∏–æ –∏ —Ç. –¥.) –ø–µ—Ä–µ–π–¥–∏ –≤ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü*.' \
            '\n\n–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', parse_mode='Markdown', reply_markup=key_default)
        botan.track(BOTAN_TOKEN, message.chat.id, message, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤ —á–∞—Ç —Å –±–æ—Ç–æ–º)')
    elif UTXT == u'–í –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª üë•':
        msg = bot.send_message(UID, '–ß—Ç–æ–±—ã –±–æ—Ç —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ ' \
            '*VK Poster* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.\n\n–ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª–æ–≥–∏–Ω ' \
            '–∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: *@durov*):', parse_mode='Markdown', reply_markup=key_hide)
        bot.register_next_step_handler(msg, add_page_channel)
    else:
        msg = bot.reply_to(message, '–ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å. –ö—É–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏?')
        bot.register_next_step_handler(msg, add_page_to_type)

def add_page_channel(message):
    UID = message.chat.id
    UTXT = message.text
    accept = True
    
    if UTXT == u'/cancel':
        bot.send_message(UID, '–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é.', reply_markup=key_default)
    elif bool(re.search('^@\S+\Z', UTXT)):
        db = SQLighter()
        check = db.select_by_chn(UTXT)
        db.close()
        if len(check) > 0:
            if int(check[0][1]) != int(UID):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–∞–Ω–∞–ª –≤ –±–∞–∑–µ, –∏ –µ—Å–ª–∏ –µ—Å—Ç—å,
                # —Ç–æ —Å–≤–µ—Ä—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                # –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–æ–º—É –∫–∞–Ω–∞–ª—É Telegram, –≤
                # –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                msg = bot.reply_to(message, '–•–º–º, –ø–æ—Ö–æ–∂–µ, —á—Ç–æ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.\n' \
                    '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É VK –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∞–∫–∫–∞—É–Ω—Ç Telegram, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ ' \
                    '–¥–æ–±–∞–≤–ª—è–ª –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.\n\n–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏—Å–ª–∞—Ç—å –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ' \
                    '*@*) –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.', reply_markup=key_hide, parse_mode='Markdown')
                accept = False
                bot.register_next_step_handler(msg, add_page_channel)
        if accept:
            try:
                if len(check) < 1:
                    bot.send_message(UTXT, '–ë–æ—Ç *VK Poster* (@VKPstBot) —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å ' \
                        '–∑–∞–ø–∏—Å–∏ –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.', parse_mode='Markdown')

                with open(str(UID) + '.UID', 'r') as file:
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .UID –¥–ª—è —á—Ç–µ–Ω–∏—è
                    data = json.load(file)

                data['to'] = 1
                data['channel'] = UTXT

                db = SQLighter()
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–í –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª'
                db.insert(data['uid'], data['vk'], data['vk_original'], 
                    data['vk_type'], int(data['last_id']), int(data['to']), 
                    data['channel'], 0, 1)
                db.close()

                UTXT = re.sub('_', '\_', UTXT)
                msg = bot.send_message(UID, '–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫–∞–Ω–∞–ª ' \
                    '%s.\n\n–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–ø–æ—Å—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø, –∞ —Ç–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å ' \
                    '–æ—Ç–ø—Ä–∞–≤–∫—É –≤–ª–æ–∂–µ–Ω–∏–π (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∞—É–¥–∏–æ –∏ —Ç. –¥.) –ø–µ—Ä–µ–π–¥–∏ –≤ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü*.' \
                    '\n\n–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?' % (UTXT.encode('utf-8')), 
                    parse_mode='Markdown', reply_markup=key_default)
                botan.track(BOTAN_TOKEN, message.chat.id, message, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª)')
            except Exception as ex:
                UTXT = re.sub('_', '\_', UTXT)
                msg = bot.reply_to(message, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ *VK Poster* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ %s.\n' \
                    '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª–æ–≥–∏–Ω –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å *@*), –≤ –∫–æ—Ç–æ—Ä–æ–º *VK Poster* —è–≤–ª—è–µ—Ç—Å—è ' \
                    '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.' % (UTXT.encode('utf-8')), 
                    parse_mode='Markdown')
                bot.register_next_step_handler(msg, add_page_channel)
    elif accept:
        msg = bot.reply_to(message, '–ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –ø—Ä–∏—Å–ª–∞–ª –ª–æ–≥–∏–Ω –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å *@*). ' \
            '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.', parse_mode='Markdown')
        bot.register_next_step_handler(msg, add_page_channel)

@bot.message_handler(func=lambda message: message.text == u'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü üöÄ')
@bot.message_handler(commands=['settings'])
def settings_choose(message):
    UID = message.chat.id
    UTXT = message.text
    
    db = SQLighter()
    if len(db.select_all_by_uid(UID)) > 0:
        key_nums = types.ReplyKeyboardMarkup(row_width=5, resize_keyboard=True)
        result = db.select_all_by_uid(UID)
        counter = ['NULL']
        pages_list = ''

        for item in result:
            counter.append({'id' : item[0]})
            if item[5] == 0:
                pages_list += '*#%s* ‚àô –ò–∑ *%s* –≤ *—á–∞—Ç —Å –±–æ—Ç–æ–º*\n' % (str(len(counter) - 1), \
                    item[3].encode('utf-8'))
                key_nums.add(types.KeyboardButton('#%s' % (str(len(counter) - 1))))
            else:
                pages_list += '*#%s* ‚àô –ò–∑ *%s* –≤ *–∫–∞–Ω–∞–ª %s*\n' % (str(len(counter) - 1), \
                    item[3].encode('utf-8'), item[6].encode('utf-8'))
                key_nums.add(types.KeyboardButton('#%s' % (str(len(counter) - 1))))
        key_nums.row(types.KeyboardButton('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))

        with io.open(str(UID) + '.UID', 'w', encoding='utf-8') as file:
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .UID —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–æ–∫ ID –∏–∑ –±–∞–∑—ã ‚Äî –Ω–æ–º–µ—Ä –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
            file.write(unicode(json.dumps({'data': counter}, ensure_ascii=False)))

        msg = bot.send_message(UID, pages_list, parse_mode='Markdown', 
            reply_markup=key_nums)
        bot.send_message(UID, '–ù–∞–∂–º–∏ –Ω–∞ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å.')
        botan.track(BOTAN_TOKEN, message.chat.id, message, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü')
        bot.register_next_step_handler(msg, settings_page)
    else:
        msg = bot.send_message(UID, '–ü–æ—Ö–æ–∂–µ, *—Ç—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª –µ—â—ë –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã*.\n–ù–∞–∂–º–∏ /add, —á—Ç–æ–±—ã' \
        ' –¥–æ–±–∞–≤–∏—Ç—å.', parse_mode='Markdown', reply_markup=key_default)
    db.close()

def settings_page(message):
    UID = message.chat.id
    UTXT = message.text

    if UTXT == u'‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é' or UTXT == u'/cancel' or UTXT == u'–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é':
        bot.send_message(UID, '–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', reply_markup=key_default)
    elif bool(re.search('^#\d+\Z', UTXT)):
        UTXT = int(re.sub('#', '', UTXT))

        try:
            with open(str(UID) + '.UID', 'r') as file:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .UID –¥–ª—è —á—Ç–µ–Ω–∏—è
                data = json.load(file)
            if UTXT < len(data['data']):
                with io.open(str(UID) + '.UID', 'w', encoding='utf-8') as file:
                    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º .UID –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π–º –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äî –Ω—É–∂–Ω—ã–º ID –∏–∑ –±–∞–∑—ã
                    file.write(unicode(json.dumps({'id': data['data'][UTXT]['id']})))
                
                db = SQLighter()
                key_settings = keyboard_setup(db.select_all_by_id(data['data'][UTXT]['id']))
                db.close()
            
                bot.send_message(UID, '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=key_settings)
                botan.track(BOTAN_TOKEN, message.chat.id, message, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
                bot.register_next_step_handler(message, settings_page_doing)
        except Exception as ex:
            print ex
            bot.send_message(UID, '–ü–æ—Ö–æ–∂–µ, —Ç—ã –ø—Ä–∏—Å–ª–∞–ª –º–Ω–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')
            bot.register_next_step_handler(message, settings_page)
    else:
        bot.send_message(UID, '–ü–æ—Ö–æ–∂–µ, —Ç—ã –ø—Ä–∏—Å–ª–∞–ª –º–Ω–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')
        bot.register_next_step_handler(message, settings_page)

def settings_page_doing(message):
    UID = message.chat.id
    UTXT = message.text

    with open(str(UID) + '.UID', 'r') as file:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .UID –¥–ª—è —á—Ç–µ–Ω–∏—è
        data = json.load(file)

    if UTXT == u'–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚ùå':
        db = SQLighter()
        db.delete_by_id(data['id'])
        db.close

        bot.send_message(UID, '*–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.*\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', parse_mode='Markdown', \
            reply_markup=key_default)
        botan.track(BOTAN_TOKEN, message.chat.id, message, '–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
    elif UTXT == u'–í–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã üìù':
        db = SQLighter()
        db.reposts_update(data['id'], 1)
        keyboard = keyboard_setup(db.select_all_by_id(data['id']))
        db.close
        
        bot.send_message(UID, '–†–µ–ø–æ—Å—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã.', 
            reply_markup=keyboard)
        botan.track(BOTAN_TOKEN, message.chat.id, message, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏: –≤–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–ø–æ—Å—Ç–æ–≤')
        bot.register_next_step_handler(message, settings_page_doing)
    elif UTXT == u'–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã üìù':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        db = SQLighter()
        db.reposts_update(data['id'], 0)
        keyboard = keyboard_setup(db.select_all_by_id(data['id']))
        db.close
        
        bot.send_message(UID, '–†–µ–ø–æ—Å—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.', 
            reply_markup=keyboard)
        botan.track(BOTAN_TOKEN, message.chat.id, message, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–ø–æ—Å—Ç–æ–≤')
        bot.register_next_step_handler(message, settings_page_doing)
    elif UTXT == u'–û—Ç–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è üìé':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        db = SQLighter()
        db.attachments_update(data['id'], 0)
        keyboard = keyboard_setup(db.select_all_by_id(data['id']))
        db.close
        
        bot.send_message(UID, '–í–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.', 
            reply_markup=keyboard)
        botan.track(BOTAN_TOKEN, message.chat.id, message, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π')
        bot.register_next_step_handler(message, settings_page_doing)
    elif UTXT == u'–í–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è üìé':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        db = SQLighter()
        db.attachments_update(data['id'], 1)
        keyboard = keyboard_setup(db.select_all_by_id(data['id']))
        db.close
        
        bot.send_message(UID, '–í–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã.', 
            reply_markup=keyboard)
        botan.track(BOTAN_TOKEN, message.chat.id, message, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏: –≤–∫–ª—é—á–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π')
        bot.register_next_step_handler(message, settings_page_doing)
    elif UTXT == u'–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîï':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        db = SQLighter()
        db.notify_update(data['id'], 0)
        keyboard = keyboard_setup(db.select_all_by_id(data['id']))
        db.close
        
        bot.send_message(UID, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.', 
            reply_markup=keyboard)
        botan.track(BOTAN_TOKEN, message.chat.id, message, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
        bot.register_next_step_handler(message, settings_page_doing)
    elif UTXT == u'–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        db = SQLighter()
        db.notify_update(data['id'], 1)
        keyboard = keyboard_setup(db.select_all_by_id(data['id']))
        db.close
        
        bot.send_message(UID, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã.', 
            reply_markup=keyboard)
        botan.track(BOTAN_TOKEN, message.chat.id, message, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏: –≤–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
        bot.register_next_step_handler(message, settings_page_doing)
    elif UTXT == u'–í–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üó£':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        db = SQLighter()
        db.is_all_posts_update(data['id'], 1)
        keyboard = keyboard_setup(db.select_all_by_id(data['id']))
        db.close
        
        bot.send_message(UID, '–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞.', 
            reply_markup=keyboard)
        botan.track(BOTAN_TOKEN, message.chat.id, message, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏: –≤–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
        bot.register_next_step_handler(message, settings_page_doing)
    elif UTXT == u'–û—Ç–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üó£':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        db = SQLighter()
        db.is_all_posts_update(data['id'], 0)
        keyboard = keyboard_setup(db.select_all_by_id(data['id']))
        db.close
        
        bot.send_message(UID, '–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.', 
            reply_markup=keyboard)
        botan.track(BOTAN_TOKEN, message.chat.id, message, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
        bot.register_next_step_handler(message, settings_page_doing)
    elif UTXT == u'–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã üëÅ':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        db = SQLighter()
        db.is_title_update(data['id'], 1)
        keyboard = keyboard_setup(db.select_all_by_id(data['id']))
        db.close
        
        bot.send_message(UID, '–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ.', 
            reply_markup=keyboard)
        botan.track(BOTAN_TOKEN, message.chat.id, message, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏: –≤–∫–ª—é—á–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è')
        bot.register_next_step_handler(message, settings_page_doing)
    elif UTXT == u'–°–∫—Ä—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã üëÅ':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        db = SQLighter()
        db.is_title_update(data['id'], 0)
        keyboard = keyboard_setup(db.select_all_by_id(data['id']))
        db.close
        
        bot.send_message(UID, '–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ.', 
            reply_markup=keyboard)
        botan.track(BOTAN_TOKEN, message.chat.id, message, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏: –æ—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è')
        bot.register_next_step_handler(message, settings_page_doing)
    elif UTXT == u'‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        os.remove(str(UID) + '.UID')
        bot.send_message(UID, '–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', reply_markup=key_default)
    else:
        bot.register_next_step_handler(message, settings_page_doing)

@bot.message_handler(commands=['stop'])
def command_stop(message):
    UID = message.chat.id

    msg = bot.send_message(UID, '‚õîÔ∏è –¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å *—É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã* –∏–∑ *VK Poster*?\n' \
        '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ *–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ*.\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ _–î–ê_', parse_mode='Markdown', 
        reply_markup=key_force)
    bot.register_next_step_handler(msg, command_stop_delete)

def command_stop_delete(message):
    UID = message.chat.id
    UTXT = message.text

    if UTXT == u'–î–ê':
        db = SQLighter()
        # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –≤—Å–µ –∑–∞–ø–∏—Å–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.delete_by_uid(UID)
        db.close
        bot.send_message(UID, '–í—Å–µ —Ç–≤–æ–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ *VK Poster*.\n–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç ' \
            '–∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏ /start', parse_mode='Markdown')
    else:
        bot.send_message(UID, '–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', reply_markup=key_default)

@bot.message_handler(func=lambda message: message.text == u'–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é')
@bot.message_handler(commands=['cancel'])
def open_menu(message):
    UID = message.chat.id

    bot.send_message(UID, '–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', reply_markup=key_default)
    botan.track(BOTAN_TOKEN, message.chat.id, message, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

@bot.message_handler(func=lambda message: message.text == u'–û –±–æ—Ç–µ VK Poster ü§ñ')
@bot.message_handler(commands=['about'])
def command_about(message):
    UID = message.chat.id

    bot.send_message(UID, '–ë–æ—Ç *VK Poster* –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –≥—Ä—É–ø–ø ' \
        '–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º, –ª–∏–±–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–±–æ—é ' \
        '–∫–∞–Ω–∞–ª Telegram.\n\n*VK Poster* –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ Python 2.7 –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–µ—Ç–æ–¥—ã API ' \
        '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ.\n\n–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ GitHub: git.io/vrH5I\n' \
        '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞: @kozak', parse_mode='Markdown', reply_markup=key_default, 
        disable_web_page_preview=True)
    botan.track(BOTAN_TOKEN, message.chat.id, message, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–æ—Ç–µ')

@bot.message_handler(commands=['stats'])
def command_stats(message):
    UID = message.chat.id
    UTXT = message.text

    db = SQLighter()
    result = db.select_all()
    chn = db.select_all_chn()
    db.close()
    
    users = []
    for i in result:
        if i[1] not in users:
            users.append(i[1])
    msg = bot.send_message(UID, 'üöÄ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: *%s*\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *%s*\n' \
        '–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: *%s*\n\n–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: *2.2.1*' % (len(result), len(users), len(chn)), \
        parse_mode='Markdown')
    botan.track(BOTAN_TOKEN, message.chat.id, message, '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')

@bot.message_handler(commands=['help'])
def command_help(message):
    UID = message.chat.id

    bot.send_message(UID, '*–ü–æ–º–æ—â—å*\n\n/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É VK\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞/' \
        '–¥–µ–π—Å—Ç–≤–∏—è\n/settings ‚Äî —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü VK\n/about ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n/stats ‚Äî' \
        '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n/stop ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ VK Poster', \
        parse_mode='Markdown')
bot.polling(none_stop=True)