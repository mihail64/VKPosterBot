# -*- coding: utf-8 -*-
import requests
import telebot
import time
import json
import re
from telebot import types
from SQLighter import SQLighter

# TOKEN –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É @BotFather
API_TOKEN = ''

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é
key_default = types.ReplyKeyboardMarkup(resize_keyboard=True)
key_default.row(types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–ö üì†'))
key_default.row(types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü üìª'))
key_default.row(types.KeyboardButton('–û –±–æ—Ç–µ VK Poster ü§ñ'))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å–∫—Ä—ã–≤–∞—é—â–∞—è –ø—Ä–µ–¥—ã–¥—É—â—É—é
key_hide = types.ReplyKeyboardHide(selective=False)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
tmp_data = [{'uid': 0, 'vk_original': '', 'to': 0, 'vk_type': ''}]
counter = []
tmp_id = 0

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)

@bot.message_handler(commands=['start'])
def command_start(message):
	UID = message.chat.id # –í UID –∫–∞–∂–¥—ã–π —Ä–∞–∑ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram

    bot.send_message(UID, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ –∏–∑ *–≥—Ä—É–ø–ø –∏ –ø–∞–±–ª–∏–∫–æ–≤ ' \
    '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ —Ç–µ–±–µ*, –∞ —Ç–∞–∫–∂–µ *–≤ —Ç–≤–æ–∏ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã* Telegram.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏ ' \
    '*–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–ö*.', parse_mode='Markdown', reply_markup=key_default)

@bot.message_handler(func=lambda message: message.text == u'–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–ö üì†')
def add_page_url(message):
    global tmp_data
    UID = message.chat.id
    tmp_data[0]['uid'] = UID

    msg = bot.send_message(UID, '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏, ' \
        '–æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ—ë –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: *vk.com/mzk*):', parse_mode='Markdown', reply_markup=key_hide)
    bot.register_next_step_handler(msg, add_page_to)

def add_page_to(message):
    global tmp_data
    UTXT = message.text

    if bool(re.search('(m.|new.|)(?i)vk.com', UTXT)):
        if bool(re.search('(m.|new.|)(?i)vk.com\/(public|club)', UTXT)):
            tmp_data[0]['vk'] = re.sub('(\Ahttp\S?:\/\/|)(m.|new.|)(?i)vk.com\/(club|public)', '', UTXT)
            tmp_data[0]['vk_type'] = 'ID'
            api = 'https://api.vk.com/method/wall.get?owner_id=-%s&count=10&filter=owner' % \
            (tmp_data[0]['vk'])
        else:
            tmp_data[0]['vk'] = re.sub('(\Ahttp\S?:\/\/|)(m.|new.|)(?i)vk.com\/', '', UTXT)
            tmp_data[0]['vk_type'] = 'DOMAIN'
            api = 'https://api.vk.com/method/wall.get?domain=%s&count=10&filter=owner' % ((tmp_data[0]['vk']))
        tmp_data[0]['vk_original'] = UTXT.lower()

        try:
            items = requests.get(api).json()
            try:
                tmp = items['response'][1]['is_pinned']
                tmp_data[0]['last_id'] = items['response'][3]['id']
            except:
                tmp_data[0]['last_id'] = items['response'][2]['id']

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.row(types.KeyboardButton('–í –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º'))
            keyboard.row(types.KeyboardButton('–í –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª'))

            msg = bot.reply_to(message, '–•–æ—Ä–æ—à–æ. –ö—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã?',
            reply_markup=keyboard)
            bot.register_next_step_handler(msg, add_page_to_type)
        except:
            msg = bot.reply_to(message, '–í–∏–¥–∏–º–æ, —Ç—ã –ø—Ä–∏—Å–ª–∞–ª –º–Ω–µ –Ω–µ —Å—Å—ã–ª–∫—É *–Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø—É–±–ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É* ' \
            '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.', parse_mode='Markdown')
            bot.register_next_step_handler(msg, add_page_to)
    else:
        msg = bot.reply_to(message, '–í–∏–¥–∏–º–æ, —Ç—ã –ø—Ä–∏—Å–ª–∞–ª –º–Ω–µ –Ω–µ —Å—Å—ã–ª–∫—É *–Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø—É–±–ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É* ' \
            '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.', parse_mode='Markdown')
        bot.register_next_step_handler(msg, add_page_to)

def add_page_to_type(message):
    global tmp_data
    UID = message.chat.id
    UTXT = message.text

    if UTXT == u'–í –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º':
        tmp_data[0]['to'] = 0
        tmp_data[0]['channel'] = UID
        db = SQLighter()
        db.insert(tmp_data[0]['uid'], tmp_data[0]['vk'], tmp_data[0]['vk_original'], tmp_data[0]['vk_type'], 
            tmp_data[0]['last_id'], tmp_data[0]['to'], tmp_data[0]['to'], 0, 1)
        db.close()
        msg = bot.send_message(UID, '–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ ' \
            '(—Å –±–æ—Ç–æ–º *VK Poster*).\n\n–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–ø–æ—Å—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø, –∞ —Ç–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å ' \
            '–æ—Ç–ø—Ä–∞–≤–∫—É –≤–ª–æ–∂–µ–Ω–∏–π (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∞—É–¥–∏–æ –∏ —Ç. –¥.) –ø–µ—Ä–µ–π–¥–∏ –≤ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü*.' \
            '\n\n–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', parse_mode='Markdown', reply_markup=key_default)
    elif UTXT == u'–í –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª':
        msg = bot.send_message(UID, '–ß—Ç–æ–±—ã –±–æ—Ç —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ ' \
            '*VK Poster* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.\n\n–ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª–æ–≥–∏–Ω ' \
            '–∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: *@durov*):', parse_mode='Markdown', reply_markup=key_hide)
        bot.register_next_step_handler(msg, add_page_channel)
    else:
        msg = bot.reply_to(message, '–ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å. –ö—É–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏?')
        bot.register_next_step_handler(msg, add_page_to_type)

def add_page_channel(message):
    global tmp_data
    UID = message.chat.id
    UTXT = message.text

    if '@' in UTXT:
        tmp_data[0]['to'] = 1
        tmp_data[0]['channel'] = UTXT
        db = SQLighter()
        db.insert(tmp_data[0]['uid'], tmp_data[0]['vk'], tmp_data[0]['vk_original'], tmp_data[0]['vk_type'], 
            tmp_data[0]['last_id'], tmp_data[0]['to'], tmp_data[0]['channel'], 0, 1)
        db.close()
        msg = bot.send_message(UID, '–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫–∞–Ω–∞–ª ' \
            '%s.\n\n–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–ø–æ—Å—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø, –∞ —Ç–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å ' \
            '–æ—Ç–ø—Ä–∞–≤–∫—É –≤–ª–æ–∂–µ–Ω–∏–π (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∞—É–¥–∏–æ –∏ —Ç. –¥.) –ø–µ—Ä–µ–π–¥–∏ –≤ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü*.' \
            '\n\n–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?' % (UTXT.encode('utf-8')), 
            parse_mode='Markdown', reply_markup=key_default)
    else:
        msg = bot.reply_to(message, '–ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –ø—Ä–∏—Å–ª–∞–ª –ª–æ–≥–∏–Ω –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å *@*). ' \
            '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.', parse_mode='Markdown')
        bot.register_next_step_handler(msg, add_page_channel)

@bot.message_handler(func=lambda message: message.text == u'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü üìª')
def settings_choose(message):
    global counter
    UID = message.chat.id
    UTXT = message.text
    
    db = SQLighter()
    if len(db.select_all_by_uid(UID)) > 0:
        msg = bot.send_message(UID, '–í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É', parse_mode='Markdown')
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        result = db.select_all_by_uid(UID)
        counter = ['NULL']
        for item in result:
            counter.append({'id':item[0]})
            if item[5] == 0:
                bot.send_message(UID, '*#%s* ‚àô –ò–∑ *%s* –≤ *—á–∞—Ç —Å –±–æ—Ç–æ–º*' % (str(len(counter) - 1), 
                    item[3].encode('utf-8')), parse_mode='Markdown')
                keyboard.add(types.KeyboardButton('#%s' % (str(len(counter) - 1))))
            else:
                bot.send_message(UID, '*#%s* ‚àô –ò–∑ *%s* –≤ *–∫–∞–Ω–∞–ª %s*' % (str(len(counter) - 1), 
                    item[3].encode('utf-8'), item[6].encode('utf-8')), parse_mode='Markdown')
                keyboard.add(types.KeyboardButton('#%s' % (str(len(counter) - 1))))
        keyboard.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
        bot.send_message(UID, '–ù–∞–∂–º–∏ –Ω–∞ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å.', 
            parse_mode='Markdown', reply_markup=keyboard)

        bot.register_next_step_handler(msg, settings_page)
    else:
        msg = bot.send_message(UID, '–ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª –µ—â—ë –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.', 
            parse_mode='Markdown', reply_markup=key_default)
    db.close()

def settings_page(message):
    global counter
    global tmp_id
    UID = message.chat.id
    UTXT = message.text

    if UTXT == u'–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        bot.send_message(UID, '–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', reply_markup=key_default)
    elif '#' in UTXT:
        UTXT = int(re.sub('#', '', UTXT))
        if UTXT < len(counter):
            row_id = counter[UTXT]['id']
            tmp_id = row_id
            db = SQLighter()
            result = db.select_all_by_id(row_id)
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            if result[0][7] == 0:
                keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã'))
            else:
                keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã'))
            if result[0][8] == 0:
                keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è'))
            else:
                keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è'))
            if result[0][10] == 0:
                keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'))
            else:
                keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'))
            db.close()
            
            keyboard.row(types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É'))
            keyboard.row(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
            bot.send_message(UID, '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=keyboard)

            bot.register_next_step_handler(message, settings_page_doing)

def settings_page_doing(message):
    global counter
    global tmp_id
    UID = message.chat.id
    UTXT = message.text

    if UTXT == u'–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É':
        db = SQLighter()
        db.delete_by_id(tmp_id)
        db.close
        bot.send_message(UID, '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ üòµ\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', reply_markup=key_default)
        counter = []
        tmp_id = 0
    if UTXT == u'–í–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        db = SQLighter()
        db.reposts_update(tmp_id, 1)
        result = db.select_all_by_id(tmp_id)
        db.close
        keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã'))
        if result[0][8] == 0:
            keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è'))
        else:
            keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è'))
        if result[0][10] == 0:
            keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'))
        else:
            keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'))
        keyboard.row(types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É'))
        keyboard.row(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
        bot.send_message(UID, '–†–µ–ø–æ—Å—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã.', 
            reply_markup=keyboard)

        bot.register_next_step_handler(message, settings_page_doing)
    if UTXT == u'–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        db = SQLighter()
        db.reposts_update(tmp_id, 0)
        result = db.select_all_by_id(tmp_id)
        db.close
        keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã'))
        if result[0][8] == 0:
            keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è'))
        else:
            keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è'))
        if result[0][10] == 0:
            keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'))
        else:
            keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'))
        keyboard.row(types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É'))
        keyboard.row(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
        bot.send_message(UID, '–†–µ–ø–æ—Å—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.', 
            reply_markup=keyboard)

        bot.register_next_step_handler(message, settings_page_doing)
    if UTXT == u'–û—Ç–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        db = SQLighter()
        db.attachments_update(tmp_id, 0)
        result = db.select_all_by_id(tmp_id)
        db.close
        if result[0][7] == 0:
            keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã'))
        else:
            keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã'))
        if result[0][10] == 0:
            keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'))
        else:
            keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'))
        keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è'))
        keyboard.row(types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É'))
        keyboard.row(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
        bot.send_message(UID, '–í–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.', 
            reply_markup=keyboard)

        bot.register_next_step_handler(message, settings_page_doing)
    if UTXT == u'–í–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        db = SQLighter()
        db.attachments_update(tmp_id, 1)
        result = db.select_all_by_id(tmp_id)
        db.close
        if result[0][7] == 0:
            keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã'))
        else:
            keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã'))
        if result[0][10] == 0:
            keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'))
        else:
            keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'))
        keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è'))
        keyboard.row(types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É'))
        keyboard.row(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
        bot.send_message(UID, '–í–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã.', 
            reply_markup=keyboard)

        bot.register_next_step_handler(message, settings_page_doing)
    if UTXT == u'–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        db = SQLighter()
        db.notify_update(tmp_id, 0)
        result = db.select_all_by_id(tmp_id)
        db.close
        if result[0][7] == 0:
            keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã'))
        else:
            keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã'))
        if result[0][8] == 0:
            keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è'))
        else:
            keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è'))
        keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'))
        keyboard.row(types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É'))
        keyboard.row(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
        bot.send_message(UID, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.', 
            reply_markup=keyboard)

        bot.register_next_step_handler(message, settings_page_doing)
    if UTXT == u'–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        db = SQLighter()
        db.notify_update(tmp_id, 1)
        result = db.select_all_by_id(tmp_id)
        db.close
        if result[0][7] == 0:
            keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã'))
        else:
            keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã'))
        if result[0][8] == 0:
            keyboard.row(types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è'))
        else:
            keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è'))
        keyboard.row(types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'))
        keyboard.row(types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É'))
        keyboard.row(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
        bot.send_message(UID, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã.', 
            reply_markup=keyboard)

        bot.register_next_step_handler(message, settings_page_doing)
    if UTXT == u'–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        bot.send_message(UID, '–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', reply_markup=key_default)

@bot.message_handler(func=lambda message: message.text == u'–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é')
def open_menu(message):
	"""
	–§—É–Ω–∫—Ü–∏—è, –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	"""
    UID = message.chat.id

    bot.send_message(UID, '–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', reply_markup=key_default)

@bot.message_handler(func=lambda message: message.text == u'–û –±–æ—Ç–µ VK Poster ü§ñ')
def command_about(message):
	"""
	–§—É–Ω–∫—Ü–∏—è, –≤—ã–≤–æ–¥—è—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
	"""
    UID = message.chat.id

    bot.send_message(UID, '–ë–æ—Ç *VK Poster* –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –≥—Ä—É–ø–ø ' \
        '–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º, –ª–∏–±–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–±–æ—é ' \
        '–∫–∞–Ω–∞–ª Telegram.\n\n*VK Poster* –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ Python 2.7 –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–µ—Ç–æ–¥—ã API ' \
        '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ.\n\n–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ GitHub: git.io/vrH5I\n' \
        '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞: @kozak', parse_mode='Markdown', reply_markup=key_default, 
        disable_web_page_preview=True)

# bot.polling(), —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç—É –∏ –Ω–µ –≤—ã–∫–ª—é—á–∞–ª—Å—è
bot.polling()